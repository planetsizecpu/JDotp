package otp;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.print.PrinterException;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 * FramePrincipal.java
 * @author JLDM
 */
public class FramePrincipal extends javax.swing.JFrame {

    // Inicializar
    Timer generador = new Timer();
    private File libro;
    public static boolean ModoAsincrono = false;
    public static boolean ModoFuerzaB = false;

    /** Creates new form FramePrincipal */
    public FramePrincipal() {
        initComponents();
        initPantalla();
        initTimers();
        // Sonidos.playBackground(80); No fue posible desactivar este tono
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GrupoBotonesBFont = new javax.swing.ButtonGroup();
        GrupoBotonesAMode = new javax.swing.ButtonGroup();
        jScrollPaneA = new javax.swing.JScrollPane();
        AreaA = new javax.swing.JTextArea();
        jScrollPaneB = new javax.swing.JScrollPane();
        AreaB = new javax.swing.JTextArea();
        ParamSysVersion = new javax.swing.JTextField();
        BotonABorrar = new javax.swing.JButton();
        BotonACrear = new javax.swing.JButton();
        BotonACopiar = new javax.swing.JButton();
        BotonAImprimir = new javax.swing.JButton();
        jSliderSym = new javax.swing.JSlider();
        jSliderLin = new javax.swing.JSlider();
        jSliderCol = new javax.swing.JSlider();
        jSliderBlq = new javax.swing.JSlider();
        jLabelBlq = new javax.swing.JLabel();
        jLabelLin = new javax.swing.JLabel();
        jLabelCol = new javax.swing.JLabel();
        jLabelSym = new javax.swing.JLabel();
        jLabelTam = new javax.swing.JLabel();
        jLabelTitulo = new javax.swing.JLabel();
        BotonCourrier = new javax.swing.JRadioButton();
        BotonMonospace = new javax.swing.JRadioButton();
        BotonDejaVu = new javax.swing.JRadioButton();
        jSliderTamano = new javax.swing.JSlider();
        CuadroMensaje = new javax.swing.JTextField();
        BotonACodificar = new javax.swing.JButton();
        BotonAPegar = new javax.swing.JButton();
        jLabelMensaje = new javax.swing.JTextField();
        BotonBPegar = new javax.swing.JButton();
        BotonBDecodificar = new javax.swing.JButton();
        BotonBCopiar = new javax.swing.JButton();
        BotonBBorrar = new javax.swing.JButton();
        BotonBImprimir = new javax.swing.JButton();
        jLabelAreaA = new javax.swing.JLabel();
        jLabelAreaB = new javax.swing.JLabel();
        BotonOff = new javax.swing.JToggleButton();
        CuadroOffset = new javax.swing.JTextField();
        BotonBFuerza = new javax.swing.JButton();
        BotonAlfanum = new javax.swing.JRadioButton();
        BotonAlfa = new javax.swing.JRadioButton();
        BotonNum = new javax.swing.JRadioButton();
        BotonMail = new javax.swing.JButton();
        BotonPwd = new javax.swing.JRadioButton();
        AreaAlong = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Generador OTP v 1.5.5");
        setBackground(new java.awt.Color(0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(new java.awt.Color(0, 0, 255));
        setMinimumSize(new java.awt.Dimension(10, 10));
        setResizable(false);

        AreaA.setEditable(false);
        AreaA.setBackground(new java.awt.Color(153, 255, 255));
        AreaA.setFont(new java.awt.Font("Courier New", 1, 8)); // NOI18N
        AreaA.setToolTipText("Area OTP / TEXTO-PLANO clave para codificar");
        AreaA.setAutoscrolls(false);
        AreaA.setDisabledTextColor(new java.awt.Color(0, 0, 153));
        AreaA.setEnabled(false);
        AreaA.setMaximumSize(new java.awt.Dimension(175, 95));
        AreaA.setPreferredSize(new java.awt.Dimension(175, 95));
        jScrollPaneA.setViewportView(AreaA);
        AreaA.getAccessibleContext().setAccessibleName("AreaA");

        AreaB.setBackground(new java.awt.Color(153, 255, 255));
        AreaB.setFont(new java.awt.Font("Courier New", 1, 8)); // NOI18N
        AreaB.setToolTipText("Area mensaje codificado");
        AreaB.setAutoscrolls(false);
        AreaB.setMaximumSize(new java.awt.Dimension(175, 95));
        AreaB.setPreferredSize(new java.awt.Dimension(175, 95));
        jScrollPaneB.setViewportView(AreaB);
        AreaB.getAccessibleContext().setAccessibleName("AreaB");

        ParamSysVersion.setEditable(false);
        ParamSysVersion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ParamSysVersion.setBorder(null);
        ParamSysVersion.setEnabled(false);

        BotonABorrar.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        BotonABorrar.setText("BORRAR");
        BotonABorrar.setToolTipText("Pulse para borrar este OTP");
        BotonABorrar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BotonABorrar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BotonABorrar.setEnabled(false);
        BotonABorrar.setMaximumSize(new java.awt.Dimension(76, 19));
        BotonABorrar.setMinimumSize(new java.awt.Dimension(76, 19));
        BotonABorrar.setPreferredSize(new java.awt.Dimension(76, 19));
        BotonABorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonABorrarActionPerformed(evt);
            }
        });

        BotonACrear.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        BotonACrear.setText("CREAR");
        BotonACrear.setToolTipText("Pulse para crear nuevo OTP no deterministico");
        BotonACrear.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BotonACrear.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BotonACrear.setEnabled(false);
        BotonACrear.setMaximumSize(new java.awt.Dimension(76, 19));
        BotonACrear.setMinimumSize(new java.awt.Dimension(76, 19));
        BotonACrear.setPreferredSize(new java.awt.Dimension(76, 19));
        BotonACrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonACrearActionPerformed(evt);
            }
        });

        BotonACopiar.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        BotonACopiar.setText("COPIAR");
        BotonACopiar.setToolTipText("Pulse para copiar este OTP al portapapeles");
        BotonACopiar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BotonACopiar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BotonACopiar.setEnabled(false);
        BotonACopiar.setMaximumSize(new java.awt.Dimension(76, 19));
        BotonACopiar.setMinimumSize(new java.awt.Dimension(76, 19));
        BotonACopiar.setPreferredSize(new java.awt.Dimension(76, 19));
        BotonACopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonACopiarActionPerformed(evt);
            }
        });

        BotonAImprimir.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        BotonAImprimir.setText("IMPRIMIR");
        BotonAImprimir.setToolTipText("Pulse para imprimir este OTP");
        BotonAImprimir.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BotonAImprimir.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BotonAImprimir.setEnabled(false);
        BotonAImprimir.setMaximumSize(new java.awt.Dimension(76, 19));
        BotonAImprimir.setMinimumSize(new java.awt.Dimension(76, 19));
        BotonAImprimir.setPreferredSize(new java.awt.Dimension(76, 19));
        BotonAImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonAImprimirActionPerformed(evt);
            }
        });

        jSliderSym.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jSliderSym.setMajorTickSpacing(1);
        jSliderSym.setMaximum(20);
        jSliderSym.setMinimum(1);
        jSliderSym.setMinorTickSpacing(1);
        jSliderSym.setPaintLabels(true);
        jSliderSym.setToolTipText("Simbolos/Columna");
        jSliderSym.setValue(7);
        jSliderSym.setName("Car/Col"); // NOI18N

        jSliderLin.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jSliderLin.setMajorTickSpacing(1);
        jSliderLin.setMaximum(20);
        jSliderLin.setMinimum(1);
        jSliderLin.setMinorTickSpacing(1);
        jSliderLin.setOrientation(javax.swing.JSlider.VERTICAL);
        jSliderLin.setPaintLabels(true);
        jSliderLin.setSnapToTicks(true);
        jSliderLin.setToolTipText("Lineas/Bloque");
        jSliderLin.setValue(7);
        jSliderLin.setName("Lineas"); // NOI18N

        jSliderCol.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jSliderCol.setMajorTickSpacing(1);
        jSliderCol.setMaximum(20);
        jSliderCol.setMinimum(1);
        jSliderCol.setMinorTickSpacing(1);
        jSliderCol.setPaintLabels(true);
        jSliderCol.setSnapToTicks(true);
        jSliderCol.setToolTipText("Columnas");
        jSliderCol.setValue(7);
        jSliderCol.setName("Columnas"); // NOI18N

        jSliderBlq.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jSliderBlq.setMajorTickSpacing(1);
        jSliderBlq.setMaximum(20);
        jSliderBlq.setMinimum(1);
        jSliderBlq.setMinorTickSpacing(1);
        jSliderBlq.setOrientation(javax.swing.JSlider.VERTICAL);
        jSliderBlq.setPaintLabels(true);
        jSliderBlq.setSnapToTicks(true);
        jSliderBlq.setToolTipText("Bloques");
        jSliderBlq.setValue(5);
        jSliderBlq.setName("Grupos"); // NOI18N
        jSliderBlq.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderBlqStateChanged(evt);
            }
        });

        jLabelBlq.setText("Bloques");

        jLabelLin.setText("Lineas");

        jLabelCol.setText("Columnas");

        jLabelSym.setText("Simbolos");

        jLabelTam.setText("Tamaño");

        jLabelTitulo.setBackground(new java.awt.Color(0, 204, 204));
        jLabelTitulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/otp/pscpu.jpg"))); // NOI18N
        jLabelTitulo.setText("jLabel1");
        jLabelTitulo.setToolTipText("No se otorga ninguna garantia por su uso ");
        jLabelTitulo.setFocusable(false);
        jLabelTitulo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jLabelTituloFocusGained(evt);
            }
        });

        GrupoBotonesBFont.add(BotonCourrier);
        BotonCourrier.setSelected(true);
        BotonCourrier.setText("Courrier");
        BotonCourrier.setBorder(null);
        BotonCourrier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonCourrierActionPerformed(evt);
            }
        });

        GrupoBotonesBFont.add(BotonMonospace);
        BotonMonospace.setText("Monospace");
        BotonMonospace.setBorder(null);
        BotonMonospace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonMonospaceActionPerformed(evt);
            }
        });

        GrupoBotonesBFont.add(BotonDejaVu);
        BotonDejaVu.setText("Deja Vu");
        BotonDejaVu.setBorder(null);
        BotonDejaVu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonDejaVuActionPerformed(evt);
            }
        });

        jSliderTamano.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jSliderTamano.setMajorTickSpacing(1);
        jSliderTamano.setMaximum(30);
        jSliderTamano.setMinimum(5);
        jSliderTamano.setMinorTickSpacing(1);
        jSliderTamano.setPaintLabels(true);
        jSliderTamano.setSnapToTicks(true);
        jSliderTamano.setToolTipText("Tamaño fuente");
        jSliderTamano.setValue(8);
        jSliderTamano.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderTamanoStateChanged(evt);
            }
        });

        CuadroMensaje.setBackground(new java.awt.Color(153, 255, 255));
        CuadroMensaje.setFont(new java.awt.Font("Monospaced", 1, 16)); // NOI18N
        CuadroMensaje.setToolTipText("Escriba aqui su mensaje < 100 Simbolos");
        CuadroMensaje.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        CuadroMensaje.setName("CuadroMensaje"); // NOI18N
        CuadroMensaje.setSelectionEnd(100);
        CuadroMensaje.setVerifyInputWhenFocusTarget(false);

        BotonACodificar.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        BotonACodificar.setText("CODIFICAR");
        BotonACodificar.setToolTipText("Pulse para codificar el texto con este OTP");
        BotonACodificar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BotonACodificar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BotonACodificar.setEnabled(false);
        BotonACodificar.setMaximumSize(new java.awt.Dimension(76, 19));
        BotonACodificar.setMinimumSize(new java.awt.Dimension(76, 19));
        BotonACodificar.setPreferredSize(new java.awt.Dimension(76, 19));
        BotonACodificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonACodificarActionPerformed(evt);
            }
        });

        BotonAPegar.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        BotonAPegar.setText("PEGAR");
        BotonAPegar.setToolTipText("Pulse para pegar OTP / TEXTO-PLANO desde el portapapeles");
        BotonAPegar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BotonAPegar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BotonAPegar.setEnabled(false);
        BotonAPegar.setMaximumSize(new java.awt.Dimension(76, 19));
        BotonAPegar.setMinimumSize(new java.awt.Dimension(76, 19));
        BotonAPegar.setPreferredSize(new java.awt.Dimension(76, 19));
        BotonAPegar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonAPegarActionPerformed(evt);
            }
        });

        jLabelMensaje.setEditable(false);
        jLabelMensaje.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelMensaje.setText("Texto Claro");
        jLabelMensaje.setBorder(null);

        BotonBPegar.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        BotonBPegar.setText("PEGAR #");
        BotonBPegar.setToolTipText("Pulse para pegar MSG desde el portapapeles");
        BotonBPegar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BotonBPegar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BotonBPegar.setEnabled(false);
        BotonBPegar.setMaximumSize(new java.awt.Dimension(76, 19));
        BotonBPegar.setMinimumSize(new java.awt.Dimension(76, 19));
        BotonBPegar.setPreferredSize(new java.awt.Dimension(76, 19));
        BotonBPegar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBPegarActionPerformed(evt);
            }
        });

        BotonBDecodificar.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        BotonBDecodificar.setText("DECODIFICAR");
        BotonBDecodificar.setToolTipText("Pulse para decodificar MSG");
        BotonBDecodificar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BotonBDecodificar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BotonBDecodificar.setEnabled(false);
        BotonBDecodificar.setMaximumSize(new java.awt.Dimension(76, 19));
        BotonBDecodificar.setMinimumSize(new java.awt.Dimension(76, 19));
        BotonBDecodificar.setPreferredSize(new java.awt.Dimension(76, 19));
        BotonBDecodificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBDecodificarActionPerformed(evt);
            }
        });

        BotonBCopiar.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        BotonBCopiar.setText("COPIAR");
        BotonBCopiar.setToolTipText("Pulse para copiar este MSG al portapapeles");
        BotonBCopiar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BotonBCopiar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BotonBCopiar.setEnabled(false);
        BotonBCopiar.setMaximumSize(new java.awt.Dimension(76, 19));
        BotonBCopiar.setMinimumSize(new java.awt.Dimension(76, 19));
        BotonBCopiar.setPreferredSize(new java.awt.Dimension(76, 19));
        BotonBCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBCopiarActionPerformed(evt);
            }
        });

        BotonBBorrar.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        BotonBBorrar.setText("BORRAR");
        BotonBBorrar.setToolTipText("Pulse para borrar este MSG");
        BotonBBorrar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BotonBBorrar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BotonBBorrar.setEnabled(false);
        BotonBBorrar.setMaximumSize(new java.awt.Dimension(76, 19));
        BotonBBorrar.setMinimumSize(new java.awt.Dimension(76, 19));
        BotonBBorrar.setPreferredSize(new java.awt.Dimension(76, 19));
        BotonBBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBBorrarActionPerformed(evt);
            }
        });

        BotonBImprimir.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        BotonBImprimir.setText("IMPRIMIR");
        BotonBImprimir.setToolTipText("Pulse para imprimir MSG");
        BotonBImprimir.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BotonBImprimir.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BotonBImprimir.setEnabled(false);
        BotonBImprimir.setMaximumSize(new java.awt.Dimension(76, 19));
        BotonBImprimir.setMinimumSize(new java.awt.Dimension(76, 19));
        BotonBImprimir.setPreferredSize(new java.awt.Dimension(76, 19));
        BotonBImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBImprimirActionPerformed(evt);
            }
        });

        jLabelAreaA.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelAreaA.setText("OTP");

        jLabelAreaB.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelAreaB.setText("MSG");

        BotonOff.setBackground(new java.awt.Color(255, 0, 0));
        BotonOff.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BotonOff.setForeground(new java.awt.Color(255, 0, 0));
        BotonOff.setSelected(true);
        BotonOff.setText("STOP");
        BotonOff.setToolTipText("Desactivar generador OTP permanentemente");
        BotonOff.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BotonOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonOffActionPerformed(evt);
            }
        });

        CuadroOffset.setBackground(new java.awt.Color(153, 255, 255));
        CuadroOffset.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        CuadroOffset.setText("0");
        CuadroOffset.setToolTipText("Nº de simbolos OTP a saltarse el codificador");
        CuadroOffset.setName("CuadroOffset"); // NOI18N

        BotonBFuerza.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        BotonBFuerza.setText("FUERZA BRUTA");
        BotonBFuerza.setToolTipText("Pulse para aplicar fuerza bruta en un archivo");
        BotonBFuerza.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BotonBFuerza.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BotonBFuerza.setEnabled(false);
        BotonBFuerza.setMaximumSize(new java.awt.Dimension(76, 19));
        BotonBFuerza.setMinimumSize(new java.awt.Dimension(76, 19));
        BotonBFuerza.setPreferredSize(new java.awt.Dimension(76, 19));
        BotonBFuerza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBFuerzaActionPerformed(evt);
            }
        });

        GrupoBotonesAMode.add(BotonAlfanum);
        BotonAlfanum.setText("AlfaNuMix");
        BotonAlfanum.setBorder(null);
        BotonAlfanum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonAlfanumActionPerformed(evt);
            }
        });

        GrupoBotonesAMode.add(BotonAlfa);
        BotonAlfa.setSelected(true);
        BotonAlfa.setText("Alfabetico");
        BotonAlfa.setBorder(null);

        GrupoBotonesAMode.add(BotonNum);
        BotonNum.setText("Numerico");
        BotonNum.setBorder(null);

        BotonMail.setText("e-mail  sugerencias");
        BotonMail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonMailActionPerformed(evt);
            }
        });

        GrupoBotonesAMode.add(BotonPwd);
        BotonPwd.setBorder(null);
        BotonPwd.setLabel("Password");

        AreaAlong.setEditable(false);
        AreaAlong.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        AreaAlong.setBorder(null);
        AreaAlong.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(BotonMail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ParamSysVersion, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE))
                        .addGap(75, 75, 75)
                        .addComponent(jLabelMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CuadroMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(13, 13, 13)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jSliderBlq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabelBlq)))
                                    .addComponent(BotonOff, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelLin)
                                    .addComponent(jSliderLin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(31, 31, 31)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPaneA, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelSym)
                                    .addComponent(jLabelCol))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jSliderCol, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                                    .addComponent(jSliderSym, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BotonACrear, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BotonABorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BotonACopiar, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BotonAPegar, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BotonAImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BotonACodificar, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BotonNum)
                            .addComponent(BotonAlfa)
                            .addComponent(BotonAlfanum)
                            .addComponent(BotonPwd)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(CuadroOffset, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPaneB, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                                    .addComponent(jSliderTamano, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(BotonMonospace)
                                            .addComponent(BotonCourrier)
                                            .addComponent(BotonDejaVu)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(BotonBDecodificar, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(BotonBImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(BotonBBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(BotonBPegar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(BotonBCopiar, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(BotonBFuerza, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addContainerGap())))
                            .addComponent(jLabelTam)))))
            .addGroup(layout.createSequentialGroup()
                .addGap(216, 216, 216)
                .addComponent(jLabelAreaA)
                .addGap(18, 18, 18)
                .addComponent(AreaAlong, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelAreaB)
                .addGap(299, 299, 299))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(CuadroMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(ParamSysVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(BotonMail))
                                .addComponent(jLabelTitulo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelAreaB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelAreaA)
                            .addComponent(AreaAlong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BotonACrear, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BotonABorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BotonACopiar, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BotonAPegar, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BotonAImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BotonACodificar, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(CuadroOffset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jSliderLin, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabelLin)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jSliderBlq, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabelBlq))
                        .addComponent(jScrollPaneA, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPaneB, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BotonBFuerza, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BotonBBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BotonBCopiar, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BotonBPegar, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BotonBImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BotonBDecodificar, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabelCol))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jSliderCol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabelSym, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jSliderSym, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabelTam)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(BotonMonospace)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BotonCourrier)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BotonDejaVu))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(BotonOff, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(jSliderTamano, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BotonAlfanum)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BotonAlfa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BotonNum)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BotonPwd)
                        .addGap(22, 22, 22))))
        );

        CuadroOffset.getAccessibleContext().setAccessibleName("Offset");

        getAccessibleContext().setAccessibleDescription("Generador de cuadernos de un solo uso - El secreto perfecto.");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BotonACrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonACrearActionPerformed
        BotonOff.setSelected(false);
        String hoja = "";

        int mode = 1;
        if (BotonAlfanum.isSelected()) {
            mode = 1;
        }
        if (BotonAlfa.isSelected()) {
            mode = 2;
        }
        if (BotonNum.isSelected()) {
            mode = 3;
        }
        if (BotonPwd.isSelected()) {
            mode = 4;
        }
        int sym = jSliderSym.getValue();
        int col = jSliderCol.getValue();
        int lin = jSliderLin.getValue();
        int blq = jSliderBlq.getValue();
        Otp cuaderno = new Otp(blq, lin, col, sym, mode);
        hoja = cuaderno.getCuadStr();
        activarFunciones();
        AreaA.setText(hoja);
        AreaAlong.setText(cuaderno.getCuadLen());
        Sonidos.playDing();
        hoja = "";
    }//GEN-LAST:event_BotonACrearActionPerformed

    private void BotonAImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAImprimirActionPerformed
        try {
            if (!AreaA.getText().isEmpty()) {
                AreaA.setForeground(Color.BLACK);
                Sonidos.playDing();
                AreaA.print();
            } else {
                Sonidos.playDong();
            }
        } catch (PrinterException ex) {
            Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BotonAImprimirActionPerformed

    private void BotonABorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonABorrarActionPerformed
        AreaA.setText("");
        AreaA.setForeground(Color.BLACK);
        Sonidos.playDing();
    }//GEN-LAST:event_BotonABorrarActionPerformed

    private void BotonACopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonACopiarActionPerformed
        try {
            if (!AreaA.getText().isEmpty()) {
                AreaA.selectAll();
                AreaA.copy();
                AreaA.setForeground(Color.BLUE);
                AreaB.setForeground(Color.BLACK);
                Sonidos.playDing();
            } else {
                Sonidos.playDong();
            }
        } catch (Exception e) {
            Sonidos.playDong();
        }
    }//GEN-LAST:event_BotonACopiarActionPerformed

    private void jSliderBlqStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderBlqStateChanged
    }//GEN-LAST:event_jSliderBlqStateChanged

    private void BotonCourrierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonCourrierActionPerformed
        Font fnt0 = Font.decode("Courier New-Bold-8");
        AreaA.setFont(fnt0);
        AreaB.setFont(fnt0);
        Font fnt1 = AreaA.getFont();
        int szi = jSliderTamano.getValue();
        float szf = (float) szi;
        Font dfnt = fnt1.deriveFont(szf);
        AreaA.setFont(dfnt);
        AreaA.repaint();
        AreaB.setFont(dfnt);
        AreaB.repaint();
    }//GEN-LAST:event_BotonCourrierActionPerformed

    private void BotonMonospaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonMonospaceActionPerformed
        Font fnt0 = Font.decode("Monospaced-Bold-8");
        AreaA.setFont(fnt0);
        AreaB.setFont(fnt0);
        Font fnt1 = AreaA.getFont();
        int szi = jSliderTamano.getValue();
        float szf = (float) szi;
        Font dfnt = fnt1.deriveFont(szf);
        AreaA.setFont(dfnt);
        AreaA.repaint();
        AreaB.setFont(dfnt);
        AreaB.repaint();
    }//GEN-LAST:event_BotonMonospaceActionPerformed

    private void BotonDejaVuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonDejaVuActionPerformed
        Font fnt0 = Font.decode("DejaVu Sans Mono");
        AreaA.setFont(fnt0);
        Font fnt1 = AreaA.getFont();
        int szi = jSliderTamano.getValue();
        float szf = (float) szi;
        Font dfnt = fnt1.deriveFont(szf);
        AreaA.setFont(dfnt);
        AreaA.repaint();
        AreaB.setFont(dfnt);
        AreaB.repaint();
    }//GEN-LAST:event_BotonDejaVuActionPerformed

    private void jSliderTamanoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderTamanoStateChanged
        Font fnt = AreaA.getFont();
        int szi = jSliderTamano.getValue();
        float szf = (float) szi;
        Font dfnt = fnt.deriveFont(szf);
        AreaA.setFont(dfnt);
        AreaB.setFont(dfnt);
    }//GEN-LAST:event_jSliderTamanoStateChanged

    private void BotonACodificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonACodificarActionPerformed
        CuadroOffset.setBackground(Color.WHITE);
        CuadroOffset.setForeground(Color.BLACK);
        String Otp = AreaA.getText();
        String cod = "";
        String msg = CuadroMensaje.getText();
        int ost = 0;
        if (!CuadroOffset.getText().isEmpty()) {
            ost = Integer.valueOf(CuadroOffset.getText());
        }
        if (ost > Otp.length()) {
            Sonidos.playDong();
            ost = 0;
            Sonidos.playDong();
            CuadroOffset.setText(String.valueOf(ost));
            Sonidos.playDong();
        }
        AreaA.setForeground(Color.BLACK);
        AreaB.setForeground(Color.BLACK);
        if (msg.length() > 100) {
            Sonidos.playDong();
            msg = msg.substring(0, 100);
            CuadroMensaje.setText(msg);
            Sonidos.playDong();
            CuadroMensaje.setForeground(Color.RED);
            CuadroMensaje.repaint();
            Sonidos.playDong();
        }
        if (!Otp.isEmpty() && !msg.isEmpty()) {
            if (Otp.length() > msg.length()) {
                OtpProcesador cuaderno = new OtpProcesador(Otp);
                cod = cuaderno.codificar(msg, ost);
                if (Integer.valueOf(CuadroOffset.getText()) > 0) {
                    ost = cuaderno.getOffset();
                    CuadroOffset.setText(String.valueOf(ost));
                    CuadroOffset.setBackground(Color.CYAN);
                }
                AreaB.setText(cod);
                AreaB.repaint();
                generarStdoutMsg(AreaB.getText());
            } else {
                CuadroMensaje.setText("Mensaje > OTP");
                CuadroMensaje.setForeground(Color.RED);
                CuadroMensaje.repaint();
                Sonidos.playDong();
            }
        } else {
            Sonidos.playDong();
        }
    }//GEN-LAST:event_BotonACodificarActionPerformed

    private void BotonAPegarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAPegarActionPerformed
        try {
            if (AreaA.getText().isEmpty()) {
                AreaA.setText("");
                AreaA.paste();
                AreaA.setText(AreaA.getText().toUpperCase());
                AreaA.setForeground(Color.BLACK);
                AreaA.repaint();
                Sonidos.playDing();
            } else {
                Sonidos.playDong();
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_BotonAPegarActionPerformed

    private void BotonBPegarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonBPegarActionPerformed
        // Atencion PASTE no recupera los caracteres CR+NL al final de linea
        AreaB.setText(null);
        AreaB.setText("");
        AreaB.paste();
        AreaB.setForeground(Color.BLACK);
        AreaB.repaint();
        if (!AreaB.getText().contains("#")) {
            Sonidos.playDong();
            AreaB.setText("El mensaje no contiene marcas de perforacion");
        } else {
            Sonidos.playDing();
        }
    }//GEN-LAST:event_BotonBPegarActionPerformed

    private void BotonBDecodificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonBDecodificarActionPerformed
        String Otp = AreaA.getText();
        String msg = AreaB.getText();
        String cod = "";
        int offset = 0;
        if (msg.startsWith("BruteForce=TRUE")) {
            ModoFuerzaB = true;
            CuadroOffset.setVisible(true);
            BotonBFuerza.setVisible(true);
            BotonBFuerza.setBackground(Color.RED);
            ParamSysVersion.setBackground(Color.BLUE);
            ParamSysVersion.setForeground(Color.CYAN);
            ParamSysVersion.setText("Experimento OTP por JLDM");
            AreaB.setText("");
        }
        if (!CuadroOffset.getText().isEmpty()) {
            offset = Integer.valueOf(CuadroOffset.getText());
        }
        if (!msg.contains("#")) {
            Sonidos.playDong();
            AreaB.setText("El mensaje no contiene marcas de perforacion");
            return;
        }
        AreaB.setForeground(Color.BLUE);
        if (Otp.isEmpty()) {
            Sonidos.playDong();
            AreaA.setText("Este OTP esta vacio!");
            return;
        } else {
            OtpProcesador cuaderno = new OtpProcesador(Otp);
            cod = cuaderno.decodificar(msg, offset);
            CuadroMensaje.setText(cod);
            /* System.out.println( "offset:" + offset); */
            cuaderno.cancel();   
            Sonidos.playDing();
        }
    }//GEN-LAST:event_BotonBDecodificarActionPerformed

    private void BotonBCopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonBCopiarActionPerformed
        try {
            if (!AreaB.getText().isEmpty()) {
                AreaB.selectAll();
                AreaB.copy();
                AreaB.setForeground(Color.BLUE);
                AreaA.setForeground(Color.BLACK);
                Sonidos.playDing();
            } else {
                Sonidos.playDong();
            }
        } catch (Exception e) {
            Sonidos.playDong();
        }
    }//GEN-LAST:event_BotonBCopiarActionPerformed

    private void BotonBBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonBBorrarActionPerformed
        AreaB.cut();
        AreaB.setText(null);
        AreaB.setText("");
        AreaB.setForeground(Color.BLACK);
        Sonidos.playDing();
    }//GEN-LAST:event_BotonBBorrarActionPerformed

    private void BotonBImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonBImprimirActionPerformed
        try {
            if (!AreaB.getText().isEmpty()) {
                AreaB.setForeground(Color.BLACK);
                Sonidos.playDing();
                AreaB.print();
            } else {
                Sonidos.playDong();
            }
        } catch (PrinterException ex) {
            Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BotonBImprimirActionPerformed

    private void BotonOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonOffActionPerformed
        if (BotonOff.isSelected()) {
            desactivarFunciones();
            Sonidos.playDing();
        } else {
            generador.cancel();
            activarFunciones();
            Sonidos.playDong();
        }
    }//GEN-LAST:event_BotonOffActionPerformed

    private void BotonBFuerzaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonBFuerzaActionPerformed
        int offset = 0;
        int otpLen = 0;
        int msgLen = 0;
        String cod = "";
        if (AreaA == null || AreaB == null) {
            return;
        }

        // Crear cuaderno para descifrado
        String Otp = AreaA.getText();
        otpLen = AreaA.getText().length();
        String msg = AreaB.getText();
        msgLen = AreaB.getText().length();
        if (!msg.contains("#")) {
            Sonidos.playDong();
            AreaB.setText("El mensaje no contiene marcas de perforacion");
            return;
        }
        BotonBFuerza.setEnabled(false);
        OtpProcesador cuaderno = new OtpProcesador(Otp);

        // Seleccionar fichero
        File fichero;
        JFileChooser fc = new JFileChooser();
        int ret = fc.showSaveDialog(BotonBFuerza);
        fichero = fc.getSelectedFile();
        if (ret == JFileChooser.CANCEL_OPTION) {
            return;
        }
        try {

            BufferedWriter grabador = new BufferedWriter(new FileWriter(fichero));

            // Bucle para todo el Otp
            while (offset < otpLen) {
                cod = cuaderno.decodificar(msg, offset);
                grabador.write(cod);
                grabador.newLine();
                offset++;
            }
            grabador.close();
        } catch (IOException ex) {
            Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        BotonBFuerza.setEnabled(true);
    }//GEN-LAST:event_BotonBFuerzaActionPerformed

    private void BotonMailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonMailActionPerformed
        abrirCorreo();
    }//GEN-LAST:event_BotonMailActionPerformed

    private void jLabelTituloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jLabelTituloFocusGained
    }//GEN-LAST:event_jLabelTituloFocusGained

    private void BotonAlfanumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAlfanumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BotonAlfanumActionPerformed

// <editor-fold defaultstate="collapsed" desc="MAIN">
    /**
     * @param args the command line arguments
     */  
    //</editor-fold>
    public static void main(String args[]) {
        int idx = 0;
        String argum;

        // Comprobar argumentos
        while (idx < args.length && args[idx].startsWith("-")) {
            argum = args[0];
            if (argum.startsWith("-1")) {
                ModoAsincrono = true;
                Otp cuaderno = new Otp(1, 20, 1, 40, 1);
                System.out.println(cuaderno.getCuadStr());
                return;
            }
            if (argum.startsWith("-2")) {
                ModoAsincrono = true;
                Otp cuaderno = new Otp(1, 20, 1, 40, 2);
                System.out.println(cuaderno.getCuadStr());
                return;
            }
            if (argum.startsWith("-3")) {
                ModoAsincrono = true;
                Otp cuaderno = new Otp(1, 20, 1, 40, 3);
                System.out.println(cuaderno.getCuadStr());
                return;
            }
            if (argum.startsWith("-b")) {
                ModoFuerzaB = true;
            }
            idx++;
        }

        // Arrancar frame
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new FramePrincipal().setVisible(true);

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea AreaA;
    private javax.swing.JTextField AreaAlong;
    private javax.swing.JTextArea AreaB;
    private javax.swing.JButton BotonABorrar;
    private javax.swing.JButton BotonACodificar;
    private javax.swing.JButton BotonACopiar;
    private javax.swing.JButton BotonACrear;
    private javax.swing.JButton BotonAImprimir;
    private javax.swing.JButton BotonAPegar;
    private javax.swing.JRadioButton BotonAlfa;
    private javax.swing.JRadioButton BotonAlfanum;
    private javax.swing.JButton BotonBBorrar;
    private javax.swing.JButton BotonBCopiar;
    private javax.swing.JButton BotonBDecodificar;
    private javax.swing.JButton BotonBFuerza;
    private javax.swing.JButton BotonBImprimir;
    private javax.swing.JButton BotonBPegar;
    private javax.swing.JRadioButton BotonCourrier;
    private javax.swing.JRadioButton BotonDejaVu;
    private javax.swing.JButton BotonMail;
    private javax.swing.JRadioButton BotonMonospace;
    private javax.swing.JRadioButton BotonNum;
    private javax.swing.JToggleButton BotonOff;
    private javax.swing.JRadioButton BotonPwd;
    private javax.swing.JTextField CuadroMensaje;
    private javax.swing.JTextField CuadroOffset;
    private javax.swing.ButtonGroup GrupoBotonesAMode;
    private javax.swing.ButtonGroup GrupoBotonesBFont;
    private javax.swing.JTextField ParamSysVersion;
    private javax.swing.JLabel jLabelAreaA;
    private javax.swing.JLabel jLabelAreaB;
    private javax.swing.JLabel jLabelBlq;
    private javax.swing.JLabel jLabelCol;
    private javax.swing.JLabel jLabelLin;
    private javax.swing.JTextField jLabelMensaje;
    private javax.swing.JLabel jLabelSym;
    private javax.swing.JLabel jLabelTam;
    private javax.swing.JLabel jLabelTitulo;
    private javax.swing.JScrollPane jScrollPaneA;
    private javax.swing.JScrollPane jScrollPaneB;
    private javax.swing.JSlider jSliderBlq;
    private javax.swing.JSlider jSliderCol;
    private javax.swing.JSlider jSliderLin;
    private javax.swing.JSlider jSliderSym;
    private javax.swing.JSlider jSliderTamano;
    // End of variables declaration//GEN-END:variables

    // Inicilizar variables de pantalla
    private void initPantalla() {
        ParamSys Parametros = new ParamSys();
        String str = null;
        str = "JVM = " + Parametros.getidSistema();
        ParamSysVersion.setText(str);
        if (ModoFuerzaB == true) {
            BotonBFuerza.setVisible(true);
            BotonBFuerza.setBackground(Color.RED);
            str = str + " (BruteForce=ACTIVADO)";
            ParamSysVersion.setBackground(Color.BLUE);
            ParamSysVersion.setForeground(Color.WHITE);
            ParamSysVersion.setText(str);
        } else {
            // CuadroOffset.setVisible(false);
            BotonBFuerza.setVisible(false);
        }
    }

    // Inicializar timers generador
    private void initTimers() {

        generador.scheduleAtFixedRate(new TimerTask() {

            @Override
            public void run() {

                int mode = 1;
                if (BotonAlfanum.isSelected()) {
                    mode = 1;
                }
                if (BotonAlfa.isSelected()) {
                    mode = 2;
                }
                if (BotonNum.isSelected()) {
                    mode = 3;
                }
                if (BotonPwd.isSelected()) {
                    mode = 4;
                }
                // Generar cuaderno con los parametros actuales
                int sym = jSliderSym.getValue();
                int col = jSliderCol.getValue();
                int lin = jSliderLin.getValue();
                int blq = jSliderBlq.getValue();
                Otp cuaderno = new Otp(blq, lin, col, sym, mode);

                // Mostrar OTP generado si procede
                if (BotonOff.isSelected()) {
                    AreaA.setText(cuaderno.getCuadStr());
                    AreaAlong.setText(cuaderno.getCuadLen());
                }
                
            }
        }, 10, 50);
    }

    // Apagar botones afectados por el generador
    private void activarFunciones() {
        BotonOff.setBackground(Color.RED);
        BotonOff.setForeground(Color.RED);
        BotonACrear.setEnabled(true);
        BotonABorrar.setEnabled(true);
        BotonACopiar.setEnabled(true);
        BotonAPegar.setEnabled(true);
        BotonACodificar.setEnabled(true);
        BotonAImprimir.setEnabled(true);
        AreaA.setEditable(true);
        AreaA.setEnabled(true);
        BotonBBorrar.setEnabled(true);
        BotonBCopiar.setEnabled(true);
        BotonBPegar.setEnabled(true);
        BotonBDecodificar.setEnabled(true);
        BotonBFuerza.setEnabled(true);
        BotonBImprimir.setEnabled(true);
        CuadroOffset.setForeground(Color.BLACK);
        BotonOff.setVisible(false);
    }

    // Encender botones afectados por el generador
    private void desactivarFunciones() {
        jSliderLin.setEnabled(true);
        jSliderBlq.setEnabled(true);
        jSliderCol.setEnabled(true);
        jSliderSym.setEnabled(true);
        BotonACrear.setEnabled(false);
        BotonABorrar.setEnabled(false);
        BotonACopiar.setEnabled(false);
        BotonAPegar.setEnabled(false);
        BotonACodificar.setEnabled(false);
        BotonAImprimir.setEnabled(false);
        AreaA.setEditable(false);
        AreaA.setEnabled(false);
        BotonBBorrar.setEnabled(false);
        BotonBCopiar.setEnabled(false);
        BotonBPegar.setEnabled(false);
        BotonBDecodificar.setEnabled(false);
        BotonBFuerza.setEnabled(false);
        BotonBImprimir.setEnabled(false);
        CuadroOffset.setForeground(Color.BLACK);
        BotonOff.setText("APAGAR");
    }

    // Generar salida standar producida por el mensaje codificado
    private void generarStdoutMsg(String msg) {
        int msgLen = msg.length();
        int msgPos = 0;
        char msgCar = 0;
        if (!msg.isEmpty()) {
            while (msgPos < msgLen) {
                msgCar = msg.charAt(msgPos);
                System.out.print(msgCar);
                msgPos++;
            }
        }
    }

    // Abrir cliente de correo
    private void abrirCorreo() {
        Desktop escritorio = Desktop.getDesktop();
        URI uri = URI.create("mailto:planetsizecpu@gmail.com");
        try {
            escritorio.mail(uri);
        } catch (IOException ex) {
            Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
